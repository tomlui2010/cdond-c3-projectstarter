version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stackname:
        type: string
      backend-stackname:
        type: string
    steps:
      - run:
          name: Delete backend and frontend stack on fail
          when: on_fail
          command: |
            echo << parameters.backend-stackname >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stackname >> --debug
            echo "Deleting S3 bucket contents"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo << parameters.frontend-stackname >>
            aws cloudformation delete-stack --stack-name << parameters.frontend-stackname >> --debug

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export kvdb_io_url="https://kvdb.io/3B2gVGXKughP697PPvG3jh/migration_${CIRCLE_WORKFLOW_ID:0:7}"
            echo "${kvdb_io_url}"
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure  $kvdb_io_url)
            echo "${SUCCESS}"
            if [ $SUCCESS == "1" ];
            then
              cd backend
              echo "Reverting migrations"
              npm install
              npm run migrations:revert
            fi
  
  failure-notification-slack:
    description: Slack failure notification when job fails
    steps:
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

orbs:
  slack: circleci/slack@4.13.1

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd /home/circleci/project/frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - failure-notification-slack

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd /home/circleci/project/backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - failure-notification-slack

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd /home/circleci/project/frontend
            npm install
            npm run test
      - failure-notification-slack
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd /home/circleci/project/backend
            npm install
            npm run test
      - failure-notification-slack

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Checking for known vulnerabilities in frontend
          command: |
            cd /home/circleci/project/frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - failure-notification-slack

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Check for known vulnerabilities in backend code
          command: |
            cd /home/circleci/project/backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - failure-notification-slack

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip
            yum install -y jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
             set +e
             aws cloudformation deploy  \
              --template-file .circleci/files/backend.yml  \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/backend-output.txt
              cat /tmp/backend-output.txt
              exit 1
             fi
             set -e
      - run:
          name: Ensure front-end infrastructure exists
          command: |
             set +e
             aws cloudformation deploy  \
              --template-file .circleci/files/frontend.yml  \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/frontend-output.txt
              cat /tmp/frontend-output.txt
              exit 1
             fi
             set -e
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo "[WEB]" > /tmp/inventory.txt
             echo "Waiting for the EC2 instance to be in the running state..."
             INSTANCE_ID=$(aws ec2 describe-instances --query "Reservations[*].Instances[?Tags[?Key=='Name' && Value=='backend-${CIRCLE_WORKFLOW_ID:0:7}']].InstanceId" --output text)
             PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
             echo "$PUBLIC_IP" >> /root/project/.circleci/ansible/inventory.txt
             echo "$PUBLIC_IP" >> /tmp/inventory.txt
             cat /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths: 
            - inventory.txt
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - failure-notification-slack

  configure-infrastructure:
    docker:
      - image: python:3.9-alpine3.13 
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["SHA256:eDbttsqNzxpGU/ABAMGtS89lJn1C+EM/B7x8xNCoDuw"]
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
             apk update && apk add --no-cache nodejs npm curl
             apk update && apk add --no-cache ansible
             apk update && apk add --no-cache openssh
             apk update && apk add --no-cache aws-cli
      - run:
          name: Configure server
          command: |
            cd /root/project/.circleci/ansible
            ansible-playbook --extra-vars "aws_access_key_id=${AWS_ACCESS_KEY_ID} aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" -i /tmp/inventory.txt configure-server.yml -vvv
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  
      - failure-notification-slack

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migration script
          command: |
            cd /home/circleci/project/backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." /home/circleci/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/3B2gVGXKughP697PPvG3jh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              export SUCCESS=$(curl --insecure  $kvdb_io_url)
              echo "Success if 1. Curl response is -> "
              echo "${SUCCESS}"
            fi
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"     
      - failure-notification-slack

  deploy-frontend:
    docker:
      - image: python:3.9-alpine3.13
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install aws-cli
          command: | 
             apk update && apk add --no-cache aws-cli

      - run:
          name: Install npm nodejs
          command: | 
             apk update && apk add --no-cache nodejs npm curl

      - run:
          name: Install tar gzip
          command: | 
            apk update && apk add --no-cache tar gzip

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n '/^\[WEB\]/{n;p;q}' /tmp/inventory.txt)
            if [ -z "$BACKEND_IP" ]; then
              echo "Error: BACKEND_IP is empty. Exiting."
              exit 1
            fi
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install typescript@latest --save-dev
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - revert-migrations
      - failure-notification-slack

  deploy-backend:
    docker:
      - image: python:3.9-alpine3.13
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["SHA256:eDbttsqNzxpGU/ABAMGtS89lJn1C+EM/B7x8xNCoDuw"]
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install aws-cli
          command: | 
             apk update && apk add --no-cache aws-cli

      - run:
          name: Install npm nodejs
          command: | 
             apk update && apk add --no-cache nodejs npm curl
             apk update && apk add --no-cache openssh-client

      - run:
          name: Install ansible
          command: |
            apk update && apk add --no-cache ansible

      - run:
          name: Install tar gzip
          command: | 
            apk update && apk add --no-cache tar gzip

      - attach_workspace:
          at: /tmp

      - run:
          name: Build and create backend app artifacts
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .

      - run:
          name: Deploy artifacts to target server using ansible and start service
          command: |
            cd .circleci/ansible
            cat /tmp/inventory.txt
            ansible-playbook -i /tmp/inventory.txt deploy-backend.yml

      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations

      - failure-notification-slack

  smoke-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout

      - run:
          name: Install AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install

      - run:
          name: Install curl
          command: | 
             sudo apt install -y tar gzip curl


      - attach_workspace:
          at: /tmp

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n '/^\[WEB\]/{n;p;q}' /tmp/inventory.txt)
            if [ -z "$BACKEND_IP" ]; then
              echo "Error: BACKEND_IP is empty. Exiting."
              exit 1
            fi
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" > api_url.txt

      - run:
          name: Backend smoke test.
          command: |
            API_URL=$(cat api_url.txt)
            echo "API_URL = ${API_URL}" 
            if curl -v "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend smoke test succeeded."
              exit 0
            else
              echo "Backend smoke test failed."
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
              echo "FRONTEND deployment is successfull"
              exit 0
            else
              echo "Frontend deployment issue. Page not loaded successfully"
              exit 1
            fi
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations

      - failure-notification-slack

  cloudfront-update:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - run:
          name: Persist old WorkflowID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo $OldWorkflowID >> /tmp/OldWorkflowID.txt
            cat /tmp/OldWorkflowID.txt

      - persist_to_workspace:
          root: /tmp
          paths: 
            - OldWorkflowID.txt

      - run:
          name: Update cloudfront distribution
          command: |
            OldWorkflowID=$(cat /tmp/OldWorkflowID.txt)
            echo "OldWorkflowID = ${OldWorkflowID}" 
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
            
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

      - revert-migrations
      - failure-notification-slack

  cleanup:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
            unzip awscli.zip
            sudo ./aws/install
      - attach_workspace:
         at: /tmp
      - run:
          name: Delete old defunct stacks
          command: |
            export OldWorkflowID=$(cat /tmp/OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting defunct frontend, backend stacks and S3"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "No old stacks found"
            fi


workflows:
  Udapeople-CICD:
    jobs:
      - build-frontend:
          context: udapeople
      - build-backend:
          context: udapeople
      - test-frontend:
          context: udapeople
          requires: [build-frontend]
      - test-backend:
          context: udapeople
          requires: [build-backend]
      - scan-frontend:
          context: udapeople
          requires: [build-frontend]
      - scan-backend:
          context: udapeople
          requires: [build-backend]
      - deploy-infrastructure:
          context: udapeople
          requires: [test-frontend,test-backend,scan-frontend,scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          context: udapeople
          requires: [deploy-infrastructure]
          filters:
            branches:
              only:
                - master
      - run-migrations:
          context: udapeople
          requires: [configure-infrastructure]
          filters:
            branches:
              only:
                - master
      - deploy-backend:
          context: udapeople
          requires: [run-migrations]
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          context: udapeople
          requires: [deploy-backend]
          filters:
            branches:
              only:
                - master
      - smoke-test:
          context: udapeople
          requires: [deploy-frontend]
          filters:
            branches:
              only:
                - master
      - cloudfront-update:
          context: udapeople
          requires: [smoke-test]
          filters:
            branches:
              only:
                - master
      - cleanup:
          context: udapeople
          requires: [cloudfront-update]
          filters:
            branches:
              only:
                - master