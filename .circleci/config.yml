version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stackname:
        type: string
      backend-stackname:
        type: string
    steps:
      - run:
          name: Delete backend and frontend stack on fail
          when: on_fail
          command: |
            echo << parameters.backend-stackname >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stackname >> --debug
            echo << parameters.frontend-stackname >>
            aws cloudformation delete-stack --stack-name << parameters.frontend-stackname >> --debug

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=1
            if (( $SUCCESS == 1 )); then
              # cd ~/project/backend
              # npm install
              # Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

orbs:
  slack: circleci/slack@4.13.1

jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  build-backend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  test-frontend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false
                
  test-backend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  scan-frontend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Checking for known vulnerabilities in frontend
          command: |
            cd frontend
            npm install babel-core@7.0.0-bridge.0 --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  scan-backend:
    docker:
      - image: cimg/node:16.20.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Check for known vulnerabilities in backend code
          command: |
            cd backend
            npm install typeorm@0.2.25 mkdirp@0.5.6 --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip
            yum install -y jq
      - run:
          name: Ensure back-end infrastructure exists
          command: |
             set +e
             aws cloudformation deploy  \
              --template-file .circleci/files/backend.yml  \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/backend-output.txt
              cat /tmp/backend-output.txt
              exit 1
             fi
             set -e
      - run:
          name: Ensure front-end infrastructure exists
          command: |
             set +e
             aws cloudformation deploy  \
              --template-file .circleci/files/frontend.yml  \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/frontend-output.txt
              cat /tmp/frontend-output.txt
              exit 1
             fi
             set -e
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo "[WEB]" > /tmp/inventory.txt
             echo "Waiting for the EC2 instance to be in the running state..."
             INSTANCE_IDS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[?State.Name != `terminated`].InstanceId' --output json)
             INSTANCE_ID=$(echo $INSTANCE_IDS | jq -r 'flatten | select(. != null)[] | select(length > 0)' )
             PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
             echo "$PUBLIC_IP" >> /root/project/.circleci/ansible/inventory.txt
             echo "$PUBLIC_IP" >> /tmp/inventory.txt
             cat /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths: 
            - inventory.txt
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          channel: "personal-projects"
          mentions: "<@U06NLJDPAAG>"
          template: basic_fail_1
          debug: false

  configure-infrastructure:
    docker:
      - image: python:3.11-alpine3.19
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["SHA256:rSkE7Rn1dRmpwmGBL4GprFdypzehyStRtsCch1owNhw"]
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
             apk add --update ansible
             apk add --update openssh
             apk add --no-cache aws-cli
      - run:
          name: Configure server
          command: |
            cd /root/project/.circleci/ansible
            ansible-playbook --extra-vars "aws_access_key_id=${AWS_ACCESS_KEY_ID} aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" -i /tmp/inventory.txt configure-server.yml -vvv
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

  run-migrations:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install npm 
          command: | 
            yum update -y 
            yum install -y npm
      - run:
          name: Install nodejs 
          command: |
            yum update -y 
            yum install -y nodejs
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install typeorm@0.2.25 mkdirp@0.5.6 --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/3B2gVGXKughP697PPvG3jh/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"     

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Enable EPEL repository
          command: yum install -y epel-release

      - run:
          name: Install npm
          command: |
            yum update -y 
            yum install -y npm

      - run:
          name: Install nodejs
          command: |
            yum update -y 
            yum install -y nodejs

      - run:
          name: Install ansible
          command: |
            yum update -y 
            yum install -y ansible

      - run:
          name: Install python
          command: |
            yum update -y
            yum install y python3
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(grep -oP '(?<=\[WEB\]\n).*' /tmp/inventory.txt | awk '{print $1}')
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL = "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["SHA256:rSkE7Rn1dRmpwmGBL4GprFdypzehyStRtsCch1owNhw"]
      - run:
          name: Install npm
          command: apt update && apt install -y npm

      - run:
          name: Install nodejs
          command: apt update && apt install -y nodejs

      - run:
          name: Install ansible
          command: apt update && apt install -y ansible

      - run:
          name: Install tar gzip
          command: apt update && apt install -y tar gzip

      - attach_workspace:
          at: /tmp

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat /tmp/inventory.txt
            ansible-playbook -i /tmp/inventory.txt deploy-backend.yml
      - destroy-environment:
          frontend-stackname: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          backend-stackname: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"  

workflows:
  default:
    jobs:
      - build-frontend:
          context: udapeople
      - build-backend:
          context: udapeople
      - test-frontend:
          context: udapeople
          requires: [build-frontend]
      - test-backend:
          context: udapeople
          requires: [build-backend]
      - scan-frontend:
          context: udapeople
          requires: [build-frontend]
      - scan-backend:
          context: udapeople
          requires: [build-backend]
      - deploy-infrastructure:
          context: udapeople
          requires: [test-frontend,test-backend,scan-frontend,scan-backend]
      - configure-infrastructure:
          context: udapeople
          requires: [deploy-infrastructure]
      - run-migrations:
          context: udapeople
          requires: [configure-infrastructure]
      - deploy-backend:
          context: udapeople
          requires: [run-migrations]
      - deploy-frontend:
          context: udapeople
          requires: [deploy-backend]